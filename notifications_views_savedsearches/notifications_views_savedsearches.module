<?php

/**
 * @file
 * Subscriptions to Views Saved Searches
 *
 * This module defines
 * - Event types: viewsnewitem
 * - Subscription type: savedsearch
 *
 */

/**
 * Implementation of hook_init()
 */
function notifications_views_savedsearches_init() {
  $ver = (module_hook("notifications", "notifications_subscription")) ? '4':'2';
  module_load_include('inc', 'notifications_views_savedsearches', "notifications_views_savedsearches.v$ver");
}

/**
 * Implementation of hook_form_alter().
 *
 * Builds subscription user interface for views savedsearch
 */
function notifications_views_savedsearches_form_alter(&$form, $form_state, $form_id) {
  global $user;
  if ($form_id == 'views_savedsearches_delete_search_form' && user_access('subscribe to views savedsearch')) {
    $curr_subs = notifications_user_get_subscriptions($user->uid, 'viewsnewitem', NULL);
    $sids = array();
    foreach ($curr_subs as $k => $sub) {
      $sids[$sub->fields['sid']] = $sub->sid;
    }
    $view = views_get_current_view();
    if (empty($view)) {
      // It's an AHAH-request then
      $view = views_get_view($form['variables']['view_name']['#value']);
    }
    $saved_searches = views_savedsearches_load_multiple($user->uid, $view->name);
    $links = array();
    foreach ($saved_searches as  $k => $option) {
      $view->set_display($option->display);
      $link = '';
      if (isset($sids[$option->sid])) {
        $link = notifications_get_link('unsubscribe', array('sid' => $sids[$option->sid], 'signed' => TRUE, 'absolute' => TRUE, 'destination' => $view->get_path()));
        $links[] = l(t('Unsubscribe from !search', array('!search' => $option->name)), $link['href'], $link['options']);
      }
      else {
        $link = notifications_get_link('subscribe', array('uid' => $user->uid, 'type' => 'savedsearch', 'confirm' => TRUE, 'fields' => array('sid' => $option->sid), 'destination' => $view->get_path()));
        $links[] = l(t('Subscribe to !search', array('!search' => $option->name)), $link['href'], $link['options']);
      }
    }
    $form['saved_collapse']['#suffix'] = theme('notifications_views_savedsearches_links', $links);
  }
}

/**
 * Implementation of hook_theme().
 */
function notifications_views_savedsearches_theme() {
  return array(
    'notifications_views_savedsearches_links' => array(
    'arguments' => array('links' => NULL),
  ));
}

/**
 * Menu access callback.
 */
function notifications_views_savedsearches_access($account) {
  global $user;
  return
  ($account->uid && $account->uid == $user->uid && user_access('subscribe to views savedsearch')) ||
      (user_access('administer notifications') && user_access('subscribe to views savedsearch', $account));
}

/**
 * Implementation of hook_perm().
 */
function notifications_views_savedsearches_perm() {
  return array('subscribe to views savedsearch');
}

/**
 * Converts sid to savedsearches name
 */
function notifications_views_savedsearches_2title($sid) {
  return db_result(db_query("SELECT name FROM {views_savedsearches} WHERE sid = %d", $sid));
}

/**
 * Implementation of hook_cron().
 *
 * Detects views changes and pass to notification.
 */
function notifications_views_savedsearches_cron() {
  drupal_set_message("Doing notifications_views_savedsearches.");
  $result = db_query("SELECT n.sid as id, fs.value as sid FROM {notifications} n NATURAL JOIN {notifications_fields} fs where n.type = 'savedsearch' and n.event_type='viewsnewitem'");

  while ($subscription = db_fetch_array($result)) {
    drupal_set_message('Processing subscription ' . $subscription['sid']);
    $already_seen = db_result(db_query("SELECT COUNT(*) FROM {notifications_views_savedsearches_seen} WHERE sid = %d", $subscription['sid']));
    if (!$already_seen) {
      db_query("INSERT INTO {notifications_views_savedsearches_seen} VALUES (%d)", $subscription['sid']);
    }
    $vs = views_savedsearches_load($subscription['sid']);
    $view = views_get_view($vs->view_name);

    if (is_object($view) && is_object($vs)) {

      if ($view instanceof view) {

        // Examine the _complete_ resultset of the display that was saved, rather than the first page of the default display
        $view->set_display($vs->display);
        $view->set_items_per_page(0);

        // Apply $vs->filters
        $view->set_exposed_input($vs->filters);

        // Run the query
        $view->execute();
        // Get ids in the views from the past
        $current_ids = notifications_views_savedsearches_get_ids($vs->sid);
        $new_items = array();
        foreach ($view->result as $item) {
          $identifier = array_shift(get_object_vars($item));
          if (!in_array($identifier, $current_ids)) {
            // Send out a notification
            $current_ids[] = $identifier;
            $new_items[] = $item;
          }
        }
        notifications_views_savedsearches_store_ids($vs->sid, $current_ids);
        if (count($new_items) > 0 && $already_seen) {
          // Generate list of titles
          $titles = array();
          foreach ($new_items as $item) {
            // We're working with nodes, send out the teaser
            if (isset($item->nid)) {
              $node = node_load($item->nid);
              $titles[] = node_view($node, TRUE, FALSE, FALSE);
            }
            // Something weird, user, other object, find the first textual field, no way to generate something nice
            else {
              $item = (array) $item;
              foreach ($item as $k => $v) {
                if (!is_numeric($v) && drupal_strlen($v) > 2) {
                  $titles[] = $v;
                  break;
                }
              }
            }
          }
          $event = array(
          'module' => 'notifications_views_savedsearches',
          'uid' => 0,
          'type' => 'viewsnewitem',
          'action' => 'new',
          'subscription' => $vs,
          'params' => array('items' => theme('item_list', $titles), 'sid' => $vs->sid),
          );
          drupal_set_message("Triggering notifications event " . print_r($event, TRUE), 'notice');
          $_event = notifications_event($event);
          drupal_set_message("Result of event triggering: " . print_r($_event, TRUE), 'notice');
        } else drupal_set_message("No new items.", "warning");
      } else drupal_set_message("We don't have a view object.", "warning");
    } else drupal_set_message("We don't have a subscription object.", "warning");
  }
}

/**
 * Gets already known ids for the given views.
 *
 * @param $sid
 *  Id of the subscription
 */
function notifications_views_savedsearches_get_ids($sid) {
  $result = db_query("SELECT itemid FROM {notifications_views_savedsearches} WHERE sid = %d", $sid);
  $ids = array();
  while ($row = db_fetch_array($result)) {
    $ids[] = $row['itemid'];
  }
  return $ids;
}

/**
 * Store the item ids for the given savedsearch.
 *
 * @param $sid
 *  Id of the subscription
 */
function notifications_views_savedsearches_store_ids($sid, $ids) {
  foreach ($ids as $id) {
    if (db_result(db_query("SELECT COUNT(*) FROM {notifications_views_savedsearches} WHERE sid = %d AND itemid = %d", $sid, $id)) == 0) {
      db_query("INSERT INTO {notifications_views_savedsearches} VALUES (%d, %d)", $sid, $id);
    }
  }
}

/**
 * Implementation of hook_token_list().
 *
 * Documents the individual tokens handled by the module.
 */
function notifications_views_savedsearches_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'viewsnewitem' || $type == 'all') {
    $tokens['viewsnewitem']['savedsearches-title'] = t('The title of the saved search.');
    $tokens['viewsnewitem']['views-items'] = t('List of new items in the view. For nodes, it\'s teasers, for others, the list of first textual field');
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function notifications_views_savedsearches_token_values($type, $object = NULL, $options = array()) {
  if (is_object($object)) {
    switch ($object->type) {
      case 'viewsnewitem':
      // FIXME this should be loaded elsewhere
        $vs = views_savedsearches_load($object->params['sid']);
        $values = array();
        $values['savedsearches-title'] = $vs->name;
        $values['views-items'] = $object->params['items'];
        return $values;
        break;

    }
  }
}

/**
 * Theme function for extending Saved Searches form with subscription links.
 */
function theme_notifications_views_savedsearches_links($links) {
  $output = '';
  $output .= '<div class="notifications_views_savedsearches_subscription">';
  $output .= theme('item_list', $links);
  $output .= '</div>';
  return $output;
}
